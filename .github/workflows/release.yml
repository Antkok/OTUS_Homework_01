name: 'C++ CI'

on:
  push:
    branches:
      - master

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - name: Project checkout
      uses: actions/checkout@v3
      with:
          submodules: true
    - name: GTest download
      run: git clone https://github.com/google/googletest.git googletest
    - name: GTest compile and install
      working-directory: ./googletest
      run: |
        sudo cmake .
        sudo cmake --build . --target install
    - name: Boost install
      run: sudo apt-get update && sudo apt-get install libboost-test-dev -y
    - name: Project build
      run: |
        cmake . -DPATCH_VERSION=${{ github.run_number }}
        cmake --build .
        cmake --build . --target test
        cmake --build . --target package
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.run_number }}
        release_name: Release ${{ github.run_number }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./helloworld-0.0.${{ github.run_number }}-Linux.deb
        asset_name: helloworld-0.0.${{ github.run_number }}-Linux.deb
        asset_content_type: application/vnd.debian.binary-package
